// $Id: error.cpp 5663 2008-09-15 17:53:59Z clworld $
// exception

#include <stdlib.h>
#include <string.h>

#ifdef TRACE
#include <assert.h>
#include <bfd.h>
#include <libgen.h>
#include <execinfo.h>
#include <sstream>
#include <cxxabi.h>
#endif /* defined(TRACE) */

#include "error.hpp"

/**
 * errnoをstd::stringに変換する。
 * @param e errno
 * @return エラー内容
 */
std::string stringError(int e)
{
	char buf[1024];
	memset(buf, '\0', sizeof(buf));
	return std::string(strerror_r(e, buf, sizeof(buf)));
}

#ifdef TRACE
/** bfd用 */
static bfd *abfd;
/** bfd用 */
static asymbol **symbols;
/** bfd用 */
static int nsymbols;

/**
 * C++の関数名を直す
 * @param mangled C的に直された関数名
 * @return C++の関数名
 */
static std::string
demangle(const char *mangled)
{
	if (mangled[0] != '_') {
		return std::string(mangled);
	}
	
	int status;
	char *dm = abi::__cxa_demangle(mangled, 0, 0, &status);
	std::string dmstr(dm);
	free(dm);
	return dmstr;
}

/**
 * アドレスから位置に変換
 * @param address アドレス(backtraceで出力される値)
 * @return 位置情報
 */
static std::string
show_debug_info (void *address)
{
    asection *section = bfd_get_section_by_name(abfd, ".debug_info");
    if (section == NULL) {
        return std::string(".debug_info not found.");
    }
    const char *file_name;
    const char *function_name;
    unsigned int lineno;
    int found = bfd_find_nearest_line(abfd, section, symbols,
                                      (long)address,
                                      &file_name,
                                      &function_name,
                                      &lineno);
    std::ostringstream stream;
    if (found && file_name != NULL && function_name != NULL) {
        char tmp[strlen(file_name)];
        strcpy(tmp, file_name);
        stream << basename(tmp) << "(" << lineno << "):" << demangle(function_name);
        return stream.str();
    }
    stream << "0x" << std::hex << (long)address << std::dec;
    return stream.str();
}

/**
 * bfdの初期化
 */
extern "C" void
__attribute__((constructor))
init_bfd_stuff ()
{
    abfd = bfd_openr("/proc/self/exe", NULL);
    assert(abfd != NULL);
    bfd_check_format(abfd, bfd_object);

    int size = bfd_get_symtab_upper_bound(abfd);
    assert(size > 0);
    symbols = (asymbol**) malloc(size);
    assert(symbols != NULL);
    nsymbols = bfd_canonicalize_symtab(abfd, symbols);
}
#endif /* defined(TRACE) */

/**
 * スタックトレース付きerror
 * コンストラクタ
 * @param __arg エラーメッセージ
 */
traceable_error::traceable_error(const std::string&  __arg)
	: std::runtime_error(__arg), message(__arg)
{
#ifdef TRACE
	stacktrace_len = backtrace(stacktrace, sizeof(stacktrace) / sizeof(stacktrace[0]));
#endif /* defined(TRACE) */
}
	
/**
 * スタックトレース付きerror
 * エラーメッセージ表示(トレース付き)
 */
const char*
traceable_error::what() const throw ()
{
#ifdef TRACE
	std::ostringstream stream;
	
	stream << message;
	for (int i = 1; i < stacktrace_len; ++i) {
		std::string debuginfo = show_debug_info((char*)stacktrace[i] -1);
		stream << " at " << debuginfo;
	}
	
	return stream.str().c_str();
#else /* !defined(TRACE) */
	return whatNoTrace();
#endif /* !defined(TRACE) */
};

/**
 * スタックトレース付きerror
 * エラーメッセージ表示(トレース無し)
 */
const char*
traceable_error::whatNoTrace() const throw()
{
	return message.c_str();
};
